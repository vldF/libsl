{
  "name": "simple",
  "lslVersion": "1.0.0",
  "types": [
    {
      "name": "Int",
      "isPointer": false,
      "kind": "simple",
      "originalType": {
        "name": "int32",
        "isPointer": false,
        "kind": "int32",
        "capacity": "INT32"
      }
    }
  ],
  "automata": [
    {
      "name": "A",
      "type": "Int",
      "constructorVariables": [],
      "variables": [
        {
          "name": "i",
          "type": "Int"
        }
      ],
      "states": [],
      "shifts": [],
      "functions": [
        {
          "name": "f",
          "automaton": "A",
          "target": "A",
          "hasBody": true,
          "args": [
            {
              "name": "param",
              "type": "Int"
            }
          ],
          "contracts": [
            {
              "kind": "REQUIRES",
              "expression": {
                "kind": "binary",
                "op": "EQ",
                "left": {
                  "kind": "qualifiedAccess",
                  "access": {
                    "kind": "variableAccess",
                    "name": "i",
                    "variableInfo": {
                      "name": "i",
                      "fullName": "A.i",
                      "type": {
                        "name": "Int",
                        "isPointer": false,
                        "kind": "simple",
                        "originalType": {
                          "name": "int32",
                          "isPointer": false,
                          "kind": "int32",
                          "capacity": "INT32"
                        }
                      },
                      "kind": "automatonVariable",
                      "automaton": "A"
                    },
                    "type": "Int"
                  }
                },
                "right": {
                  "kind": "integer",
                  "value": 0
                }
              }
            }
          ],
          "statements": [
            {
              "kind": "assignment",
              "variable": "i",
              "value": {
                "kind": "integer",
                "value": 1
              }
            }
          ]
        },
        {
          "name": "g",
          "automaton": "A",
          "target": "A",
          "hasBody": true,
          "args": [
            {
              "name": "a",
              "type": "Int"
            }
          ],
          "contracts": [],
          "statements": [
            {
              "kind": "assignment",
              "variable": "i",
              "value": {
                "kind": "qualifiedAccess",
                "access": {
                  "kind": "variableAccess",
                  "name": "a",
                  "variableInfo": {
                    "name": "a",
                    "fullName": "g.a",
                    "type": {
                      "name": "Int",
                      "isPointer": false,
                      "kind": "simple",
                      "originalType": {
                        "name": "int32",
                        "isPointer": false,
                        "kind": "int32",
                        "capacity": "INT32"
                      }
                    },
                    "kind": "functionArgument",
                    "function": "A.g",
                    "functionArgTypes": [
                      "Int"
                    ]
                  },
                  "type": "Int"
                }
              }
            }
          ]
        },
        {
          "name": "a",
          "automaton": "A",
          "target": "A",
          "hasBody": true,
          "args": [
            {
              "name": "i",
              "type": "Int"
            }
          ],
          "contracts": [],
          "statements": [
            {
              "kind": "assignment",
              "variable": "i",
              "value": {
                "kind": "integer",
                "value": 0
              }
            }
          ]
        }
      ]
    }
  ]
}